class Solution {
public:
    int furthestBuilding(vector<int>& heights, int bricks, int ladders) {
        int n = heights.size();
        // Max-heap to store the largest differences where ladders can be used
        priority_queue<int>maxHeap;

        for(int i = 0; i < n-1; i++){
            int diff = heights[i+1] - heights[i];
            if(diff > 0){
                maxHeap.push(-diff);
            }

            // Use bricks first when there are more height differences than ladders available
            if(maxHeap.size() > ladders){
                bricks += maxHeap.top();
                maxHeap.pop();
            }
            // If the bricks become negative, we can't proceed further
            if(bricks < 0) {
                return i;
            }
        }
        return n-1;
    }
};
