class Solution {
public:
    int minRefuelStops(int target, int startFuel, vector<vector<int>>& stations) {
        // Edge case: if initial fuel is enough to reach the target
        if(startFuel >= target) return 0;

         // Priority queue (max-heap) to store the fuel from passed stations
        priority_queue<int>maxHeap;
        int maxDistance = startFuel;
        int stops = 0;
        int idx = 0;
        int n = stations.size();

        while(maxDistance < target){
            // Add all reachable stations to the max-heap
            while(idx < n && stations[idx][0] <= maxDistance){
                maxHeap.push(stations[idx++][1]);
            }
             // If no stations are reachable, return -1
            if(maxHeap.empty()){
                return -1;
            }
            // Refuel from the station with the most fuel available
            maxDistance += maxHeap.top();
            maxHeap.pop();
            stops++;
        }
        return stops;
    }
};
