class Solution {
public:
    double mincostToHireWorkers(vector<int>& quality, vector<int>& wage, int k) {
        int n = quality.size();
        vector<pair<double , int>> workers; // ratio , quality

        for(int i = 0; i < n; i++){
            double ratio = (double)wage[i] / quality[i];
            workers.push_back({ratio , quality[i]});
        }

        // Sort workers by their ratio
        sort(workers.begin() , workers.end());

        double minCost = INT_MAX;
        int totalQuality = 0;
        priority_queue<int> maxHeap; // Max heap to keep the highest quality workers

        for(auto &pair : workers){
            double currRatio = pair.first;
            int currQuality = pair.second;

            maxHeap.push(currQuality);
            totalQuality += currQuality;
            if(maxHeap.size() > k){
                totalQuality -= maxHeap.top();
                maxHeap.pop();
            }
            if(maxHeap.size() == k){
                minCost = min(minCost , currRatio * totalQuality);
            }
        }
        return minCost;
    }
};
