class Solution{
    public:
    string compress(string s)
    {
        int n = s.length();
        vector<vector<string>> dp(n, vector<string>(n, ""));
        
        // Initialize the dp table with substrings
        for (int len = 1; len <= n; len++) {
            for (int i = 0; i <= n - len; i++) {
                int j = i + len - 1;
                string substring = s.substr(i, len);
                dp[i][j] = substring;  // Initial, uncompressed substring
                
                // Try to split the string into two parts and combine the results
                for (int k = i; k < j; k++) {
                    string left = dp[i][k];
                    string right = dp[k + 1][j];
                    if (left.length() + right.length() < dp[i][j].length()) {
                        dp[i][j] = left + right;
                    }
                }
                
                // Check if the substring can be represented by a repeated pattern
                for (int k = 1; k <= len / 2; k++) {
                    if (len % k == 0) {
                        string repeatPattern = s.substr(i, k);
                        string constructedString = "";
                        for (int t = 0; t < len / k; t++) {
                            constructedString += repeatPattern;
                        }
                        if (constructedString == substring) {
                            string candidate = dp[i][i + k - 1] + "*";
                            if (candidate.length() < dp[i][j].length()) {
                                dp[i][j] = candidate;
                            }
                        }
                    }
                }
            }
        }
        
        return dp[0][n - 1];
    }
};
