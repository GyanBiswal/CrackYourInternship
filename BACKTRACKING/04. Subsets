class Solution {
public:
    void backtrack(vector<int>& nums , vector<vector<int>> &results , vector<int> &current , int start){
        // Add the current subset to the result
        results.push_back(current);
        for(int i = start; i < nums.size(); i++){
            if(i > start && nums[i] == nums[i-1]) continue;
            current.push_back(nums[i]);
            backtrack(nums , results , current , i+1);
            current.pop_back();
        }
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> results;
        vector<int> current;
        // Sort the array to handle duplicates
        sort(nums.begin(), nums.end());
        backtrack(nums , results, current, 0);
        return results;  
    }
};
