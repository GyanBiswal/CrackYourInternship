class Solution {
public:
    bool isPalindrome(int start , int end , string &s){
        while(start < end){
            if(s[start] != s[end]) return false;
            start++;
            end--;
        }
        return true;
    }
    void backtrack(int start , string &s , vector<string>&current, vector<vector<string>>&result){
        if(start >= s.length()){
            result.push_back(current);
            return;
        }

        for(int end = start; end < s.length(); end++){
            if(isPalindrome(start , end , s)){
                current.push_back(s.substr(start, end - start + 1));
                backtrack(end + 1 , s , current , result);
                current.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>>result;
        vector<string>current;
        backtrack(0, s, current, result);
        return result;
    }
};
