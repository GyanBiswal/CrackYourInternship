class Solution {
public:
    bool isValid(vector<string> &nQueens, int row, int col, int n){
        // check if column already has a queen
        for(int i = 0; i < row; i++){
            if(nQueens[i][col] == 'Q') return false;
        }

        // top left - bottom right
        for(int i = row-1 , j = col-1; i >= 0 && j >= 0; i-- , j--){
            if(nQueens[i][j] == 'Q') return false;
        }

        // top right - bottom left
        for(int i = row-1 , j = col+1; i >= 0 && j < n; i-- , j++){
            if(nQueens[i][j] == 'Q') return false;
        }
        return true;
    }
    void solveQueen(int row, vector<vector<string>> &result, vector<string> &nQueens , int n){
        if(row == n){
            result.push_back(nQueens);
            return;
        }
        for(int col = 0; col < n; col++){
            if(isValid(nQueens , row , col , n)){
                nQueens[row][col] = 'Q';
                solveQueen(row + 1 , result , nQueens , n);
                nQueens[row][col] = '.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> result;
        vector<string>nQueens(n , string(n , '.'));
        solveQueen(0 , result , nQueens , n);
        return result;
    }
};
