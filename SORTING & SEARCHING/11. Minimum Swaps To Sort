class Solution 
{
    public:
    // Function to return the minimum number of swaps required to sort the array
    int minSwaps(vector<int>& arr) {
        int n = arr.size();
        vector<pair<int, int>> arrPos(n);
    
        // Pairing elements with their original indices
        for (int i = 0; i < n; i++) {
            arrPos[i] = {arr[i], i};
        }
    
        // Sorting the array by the elements' values
        sort(arrPos.begin(), arrPos.end());
    
        vector<bool> visited(n, false);
        int swaps = 0;
    
        // Detecting cycles in the sorted array
        for (int i = 0; i < n; i++) {
            // If the element is already visited or is already in the correct position
            if (visited[i] || arrPos[i].second == i)
                continue;
    
            // Find the number of nodes in this cycle
            int cycleSize = 0;
            int j = i;
            while (!visited[j]) {
                visited[j] = true;
                j = arrPos[j].second;
                cycleSize++;
            }
    
            // If there is more than one element in the cycle, add cycleSize - 1 to swaps
            if (cycleSize > 1) {
                swaps += (cycleSize - 1);
            }
        }
    
        return swaps;
    }
};
