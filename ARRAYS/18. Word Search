class Solution {
public:
    bool dfs(vector<vector<char>>& board, int count , int i , int j , string &word){
        int n = board.size();
        int m = board[0].size();

        if(word.length() == count) return true;

        if(i < 0 || j < 0 || i >= n || j >= m || board[i][j] != word[count]) return false;

        board[i][j] = '*'; // to make sure it doesn't visit the same cell again

        bool ans =(
            dfs(board , count + 1 , i + 1 , j , word) ||
            dfs(board , count + 1 , i - 1 , j , word) || 
            dfs(board , count + 1 , i , j + 1 , word) || 
            dfs(board , count + 1 , i , j - 1 , word)
        );
        
        board[i][j] = word[count];
        return ans;
    }
    bool exist(vector<vector<char>>& board, string word) {
        int n = board.size();
        int m = board[0].size();
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(board[i][j] == word[0] && dfs(board , 0 , i , j , word)){
                    return true;
                }
            }
        }
        return false;
    }
};
