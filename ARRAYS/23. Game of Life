class Solution {
public:
    void gameOfLife(vector<vector<int>>& board) {
        int n = board.size();
        int m = board[0].size();
        vector<vector<int>>dirs = {{0,1},{1,0},{0,-1},{-1,0},{1,1},{-1,-1},{1,-1},{-1,1}};

        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                int liveNeighbors = 0;
                // count live neighbors
                for(auto dir : dirs){
                    int x = i + dir[0];
                    int y = j + dir[1];
                    if(x >= 0 && x < n && y >= 0 && y < m && abs(board[x][y]) == 1){
                        liveNeighbors++;
                    }
                }

                // Apply Rules
                if(board[i][j] == 1 && (liveNeighbors < 2 || liveNeighbors > 3)){
                    board[i][j] = -1; // live to dead
                }
                if(board[i][j] == 0 && liveNeighbors == 3){
                    board[i][j] = 2; // dead to live
                }
            }
        }

        // 2. Update the matrix
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(board[i][j] == -1){
                    board[i][j] = 0; // live to dead
                }
                if(board[i][j] == 2){
                    board[i][j] = 1; // dead to live
                }
            }
        }
    }
};
