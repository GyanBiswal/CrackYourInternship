class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int>ans;
        deque<int>dq;

        for(int i = 0; i < nums.size(); i++){
            // Remove indices that are out of the bounds of the current window
            while(!dq.empty() && dq.front() == i - k){
                dq.pop_front();
            }
             // Remove elements from the deque that are smaller than the current element
            while(!dq.empty() && nums[i] > nums[dq.back()]){
                dq.pop_back();
            }
            // Add the current element's index to the deque
            dq.push_back(i);
            // The front of the deque is the maximum element of the current window
            if(i >= k - 1){
                ans.push_back(nums[dq.front()]);
            }
        }
        return ans;
    }
};
