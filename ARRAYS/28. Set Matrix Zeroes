class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int row = matrix.size();
        int col = matrix[0].size();
        bool col0 = false; // To check if the first column needs to be zeroed
        
        // Check if the first column needs to be zeroed
        for (int i = 0; i < row; i++) {
            if (matrix[i][0] == 0) {
                col0 = true;
            }
            // Mark the first row and first column
            for (int j = 1; j < col; j++) {
                if (matrix[i][j] == 0) {
                    matrix[i][0] = 0;
                    matrix[0][j] = 0;
                }
            }
        }
        
        // Zero out cells based on the markers in the first row and column
        for (int i = row - 1; i >= 0; i--) {
            for (int j = col - 1; j >= 1; j--) {
                if (matrix[i][0] == 0 || matrix[0][j] == 0) {
                    matrix[i][j] = 0;
                }
            }
            // Handle the first column separately
            if (col0) {
                matrix[i][0] = 0;
            }
        }

    }


        
    //     int n = matrix.size();
    //     int m = matrix[0].size();
    //     vector<int> row(n, 0); // Vector to track rows
    //     vector<int> col(m, 0); // Vector to track columns
        
    //     for(int i = 0; i < n; i++){
    //         for(int j = 0; j < m; j++){
    //             if(matrix[i][j] == 0){
    //                 row[i] = 1;
    //                 col[j] = 1;
    //             }
    //         }
    //     }

    //     for(int i = 0; i < n; i++){
    //         for(int j = 0; j < m; j++){
    //             if(row[i] || col[j]){
    //                 matrix[i][j] = 0;
    //             }
    //         }
    //     }

    // Time Complexity : O(n x m) + O(n x m) = O(2 x n x m)
    // Space Complexity : O(n) + O(m)
};
