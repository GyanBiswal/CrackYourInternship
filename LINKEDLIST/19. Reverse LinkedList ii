/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if (head == nullptr || left == right) return head;

        ListNode dummy(0);
        dummy.next = head;
        ListNode* prev = &dummy;

        // 1. Move `prev` to the node just before the `left` position
        for (int i = 1; i < left; ++i) {
            prev = prev->next;
        }

        // `start` is the first node of the segment to be reversed
        ListNode* start = prev->next;
        // `then` is the node that will be moved
        ListNode* then = start->next;

        // 2. Reverse the segment from `left` to `right`
        for (int i = 0; i < right - left; ++i) {
            start->next = then->next; // Skip `then`
            then->next = prev->next;  // Move `then` to the beginning of the list
            prev->next = then;        // Update the `prev` node's next pointer
            then = start->next;       // Move `then` to the next node
        }

        return dummy.next;
    }
};
