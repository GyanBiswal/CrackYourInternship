/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode lessList(0); // Dummy head for less list
        ListNode greaterList(0); // Dummy head for greater list

        ListNode* p1 = &lessList;
        ListNode* p2 = &greaterList;

        while(head != NULL){
            if(head->val < x){
                p1->next = head;
                p1 = p1->next;
            }
            else{
                p2->next = head;
                p2 = p2->next;
            }
            head = head->next;
        }

        // End the greater list
        p2->next = NULL;
    
        // Merge the two lists
        p1->next = greaterList.next;
    
        // Return the merged list, starting from the first node of the less list
        return lessList.next;
    }
};
