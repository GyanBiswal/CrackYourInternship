/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head) {
        if(head == NULL || head->next == NULL){
            return head;
        }
        ListNode* newNode = reverse(head->next);
        ListNode* front = head->next;
        front->next = head;
        head->next = NULL;

        return newNode;
    }
    ListNode* findMiddle(ListNode* head) {
        if(head == NULL || head->next == NULL){
            return head;
        }
        ListNode* slow = head;
        ListNode* fast = head;

        while(fast != NULL && fast->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    void merge(ListNode* head1 , ListNode* head2){
        while(head2 != NULL){
            ListNode* next = head1->next;
            head1->next = head2;
            head1 = head2;
            head2 = next;

        }
    }
    void reorderList(ListNode* head) {
        if(head == NULL || head->next == NULL) return;

        ListNode* middle = findMiddle(head);
        ListNode* leftHead = head;
        ListNode* rightHead = middle->next;
        middle->next = NULL;

        rightHead = reverse(rightHead);
        merge(leftHead, rightHead);
    }    
    
};
