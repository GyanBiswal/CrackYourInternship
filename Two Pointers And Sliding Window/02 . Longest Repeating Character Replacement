class Solution {
public:
    int characterReplacement(string s, int k) {
        unordered_map<char,int>count;
        int maxCount = 0;
        int maxLength = 0;
        int left = 0;
        for(int right = 0; right < s.length(); right++){
            count[s[right]]++;
            maxCount = max(maxCount , count[s[right]]);

            // If the number of characters that need to be replaced 
            //(i.e., the window size minus the maximum frequency) is more than k, shrink the window from the left.
            while ((right - left + 1) - maxCount > k) {
                count[s[left]]--;
                left++;
            }
            maxLength = max(maxLength , right - left + 1);
        }
        return maxLength;
    }
};
