class Solution
{
    public:
        // Function to compute the LPS array
    vector<int> computeLPSArray(const string& pattern) {
        int m = pattern.length();
        vector<int> lps(m, 0);
        int len = 0; // length of the previous longest prefix suffix
        int i = 1;
    
        while (i < m) {
            if (pattern[i] == pattern[len]) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    }
        vector <int> search(string pattern, string text)
        {
            vector<int> result;
        int n = text.length();
        int m = pattern.length();

        if (m > n) return result; // If pattern is longer than text, no matches possible

        // Compute the LPS array
        vector<int> lps = computeLPSArray(pattern);

        int i = 0; // index for text
        int j = 0; // index for pattern

        while (i < n) {
            if (pattern[j] == text[i]) {
                i++;
                j++;
            }

            if (j == m) {
                result.push_back(i - j + 1); // 1-based index
                j = lps[j - 1];
            } else if (i < n && pattern[j] != text[i]) {
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }

        return result;
        }
     
};
