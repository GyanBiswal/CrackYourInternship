class Solution {
public:
    string minWindow(string s, string t) {
        int n = s.length();
        if(t.length() > s.length()) return "";
        unordered_map<char , int>map;

        for(char &ch : t){
            map[ch]++;
        }
        int required = t.length();
        int minWindowSize = INT_MAX;
        int start_idx = 0;
        int i = 0 , j = 0;

        while(j < n){
            char ch = s[j];
            if(map[ch] > 0) required--;
            map[ch]--;

            while(required == 0){ // we got a valid substring , now try to shrink it
                int currentWindowSize = j - i + 1;
                if(currentWindowSize < minWindowSize){
                    minWindowSize = currentWindowSize;
                    start_idx = i;
                }
                map[s[i]]++;
                if(map[s[i]] > 0) required++;
                i++;
            }
            j++;
        }
        return minWindowSize == INT_MAX ? "" : s.substr(start_idx , minWindowSize);
    }
};
