class Solution {
public:
    vector<string> fullJustify(vector<string>& words, int maxWidth) {
        vector<string> result;
        vector<string> currentLine;
        int currentLength = 0;

        for (const string& word : words) {
            // Check if adding the new word exceeds the maxWidth
            if (currentLength + word.length() + currentLine.size() > maxWidth) {
                // Form and justify the current line
                result.push_back(justifyLine(currentLine, maxWidth, false));
                // Start a new line with the current word
                currentLine.clear();
                currentLength = 0;
            }
            currentLine.push_back(word);
            currentLength += word.length();
        }

        // Handle the last line (left-justified)
        if (!currentLine.empty()) {
            result.push_back(justifyLine(currentLine, maxWidth, true));
        }

        return result;
    }

private:
    string justifyLine(const vector<string>& words, int maxWidth, bool isLastLine) {
        string line;
        int totalSpaces = maxWidth;
        int numWords = words.size();

        // Calculate total length of words and spaces needed
        for (const string& word : words) {
            totalSpaces -= word.length();
        }

        if (numWords == 1 || isLastLine) {
            // Special case for single word or last line
            line = words[0];
            for (int i = 1; i < numWords; ++i) {
                line += " " + words[i];
            }
            line += string(maxWidth - line.length(), ' ');
        } else {
            // Distribute spaces between words
            int spaces = totalSpaces / (numWords - 1);
            int extraSpaces = totalSpaces % (numWords - 1);

            for (int i = 0; i < numWords; ++i) {
                line += words[i];
                if (i < numWords - 1) {
                    line += string(spaces + (i < extraSpaces ? 1 : 0), ' ');
                }
            }
        }

        return line;
    }
};
