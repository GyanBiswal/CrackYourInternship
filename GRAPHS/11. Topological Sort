class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // 1. Calculate indegree
	    vector<int>indegree(V,0);
	    for(int i = 0; i < V; i++){
	        for(auto &it : adj[i]){
	            indegree[it]++;
	        }
	    }
	    
	    // 2. Add node with indegree 0
	    vector<int>ans;
	    queue<int>q;
	    for(int i = 0; i < V; i++){
	        if(indegree[i] == 0){
	            q.push(i);
	        }
	    }
	    
	    // 3. Perform Kahn's algorythm
	    while(!q.empty()){
	        int currNode = q.front();
	        q.pop();
	        ans.push_back(currNode);
	        for(int i : adj[currNode]){
	            indegree[i]--;
	            if(indegree[i] == 0){
	                q.push(i);
	            }
	        }
	    }
	    return ans;
	}
};
