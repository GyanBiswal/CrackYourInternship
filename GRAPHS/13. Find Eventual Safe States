class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int V = graph.size();

        // 1. Make graph , but in reverse order
        vector<vector<int>>adj(V);
        for(int i = 0; i < V; i++){
            // i -> it , reverse this , it -> i
            for(auto &it : graph[i]){
                adj[it].push_back(i);
            }
        }

        // 2. Calculate indegree
        vector<int>indegree(V , 0);
        for(int i = 0; i < V; i++){
            for(auto &it : adj[i]){
                indegree[it]++;
            }
        }

        // 3. Add Node with indegree 0 , i.e terminal node
        vector<int>safeNodes;
        queue<int>q;
        for(int i = 0; i < V; i++){
            if(indegree[i] == 0){
                q.push(i);
            }
        }

        // 4. Kahn's Algorithm
        while(!q.empty()){
            int currNode = q.front();
            q.pop();
            safeNodes.push_back(currNode);
            for(int i : adj[currNode]){
                indegree[i]--;
                if(indegree[i] == 0){
                    q.push(i);
                }
            }
        }


        sort(safeNodes.begin() , safeNodes.end());
        return safeNodes;
    }
};
