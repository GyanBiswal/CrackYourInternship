class Solution {
public:
    void dfs(vector<vector<int>>& grid , int i , int j , queue<pair<int , int>>&q){
        int row = grid.size();
        int col = grid[0].size();
        if(i >= 0 && i < row && j >= 0 && j < col && grid[i][j] == 1){
            grid[i][j] = -1; // Mark as visited
            q.push({i,j});
            dfs(grid , i + 1 , j , q);
            dfs(grid , i - 1 , j , q);
            dfs(grid , i , j + 1 , q);
            dfs(grid , i , j - 1 , q);
        }
    }
    int shortestBridge(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        int steps = 0;
        bool found = false;

        vector<pair<int , int>> island1;
        vector<pair<int , int>> island2;
        queue<pair<int,int>>q;

        // 1 . Find the First Island
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                if(grid[i][j] == 1){
                    dfs(grid , i , j , q);
                    found = true;
                    break;
                }
            }
            if(found) break;
        }

        // 2. Perform BFS from all cells of the island1
        vector<vector<int>>dirs = {{0,1},{1,0},{-1,0},{0,-1}};

        while(!q.empty()){
            int size = q.size();
            while(size--){
                int i = q.front().first;
                int j = q.front().second;
                q.pop();
                for(auto &dir : dirs){
                    int new_i = i + dir[0];
                    int new_j = j + dir[1];
                    if(new_i >= 0 && new_i < row && new_j >= 0 && new_j < col){
                        if(grid[new_i][new_j] == 1){ // we have reached the second island
                            return steps;
                        }
                        else if(grid[new_i][new_j] == 0){
                            grid[new_i][new_j] = -1; // Mark as visited
                            q.push({new_i,new_j});
                        }
                    }
                }
            }
            steps++;
        }
        return -1;
    }
};
