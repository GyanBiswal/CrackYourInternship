class Solution {
public:
    double dfs(const string& start, const string& end, unordered_map<string, unordered_map<string, double>>& graph, unordered_set<string>& visited) {
        // If the start variable is not in the graph, return -1.0
        if (graph.find(start) == graph.end()) return -1.0;

        // If the start and end are the same, return 1.0
        if (start == end) return 1.0;

        // Mark this node as visited
        visited.insert(start);

        // Explore all neighbors
        for (auto& neighbor : graph[start]) {
            if (visited.find(neighbor.first) == visited.end()) {
                double productWeight = dfs(neighbor.first, end, graph, visited);
                if (productWeight != -1.0) {
                    return productWeight * neighbor.second;
                }
            }
        }
        
        return -1.0;
    }
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        unordered_map<string, unordered_map<string, double>> graph;

        // Build the graph
        for (int i = 0; i < equations.size(); i++) {
            string A = equations[i][0];
            string B = equations[i][1];
            double value = values[i];
            graph[A][B] = value;
            graph[B][A] = 1.0 / value;
        }

        vector<double> results;
        for (auto& query : queries) {
            string C = query[0];
            string D = query[1];
            unordered_set<string> visited;
            double result = dfs(C, D, graph, visited);
            results.push_back(result);
        }
        return results;
    }
};
