class Solution {
public:
    int swimInWater(vector<vector<int>>& grid) {
        int n = grid.size();
        priority_queue<pair<int , pair<int , int>> , vector<pair<int , pair<int , int>>> , greater<>>pq;
        vector<vector<int>>minTime(n , vector<int>(n , INT_MAX));
        vector<vector<int>>dirs = {{0,1},{1,0},{-1,0},{0,-1}};

        pq.push({grid[0][0] , {0,0}});
        minTime[0][0] = grid[0][0];

        while(!pq.empty()){
            auto curr = pq.top();
            pq.pop();

            int currTime = curr.first;
            int i = curr.second.first;
            int j = curr.second.second;

            if(i == n - 1 && j == n - 1) return currTime;

            for(auto dir : dirs){
                int new_i = i + dir[0];
                int new_j = j + dir[1];

                if(new_i >= 0 && new_i < n && new_j >= 0 && new_j < n){
                    int newTime = max(currTime , grid[new_i][new_j]);
                    
                    if(newTime < minTime[new_i][new_j]){
                        minTime[new_i][new_j] = newTime;
                        pq.push({newTime , {new_i , new_j}});
                    }

                }
            }
        }
        return -1;
    }
};
