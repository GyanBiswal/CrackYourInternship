class Solution {
public:
    vector<int>parent;
    vector<int>rank;

    int find(int x){
        if(x == parent[x]) return x;
        return parent[x] = find(parent[x]);
    }
    void Union(int x , int y){
        int x_parent = find(x);
        int y_parent = find(y);

        if(x_parent == y_parent) return;

        if(rank[x_parent] > rank[y_parent]){
            parent[y_parent] = x_parent;
        }
        else if(rank[y_parent] > rank[x_parent]){
            parent[x_parent] = y_parent;
        }
        else{
            parent[y_parent] = x_parent;
            rank[x_parent]++;
        }
    }
    int makeConnected(int n, vector<vector<int>>& connections) {
        if(connections.size() < n - 1) return -1;
        parent.resize(n);
        rank.resize(n,0);

        for(int i = 0; i < n; i++){
            parent[i] = i;
        }

        int components = n;
        for(auto &con : connections){
            if(find(con[0]) != find(con[1])){ // if parents of both are not equal , then make them a single component
                Union(con[0] , con[1]);
                components--;
            }
        }
        return components - 1;
    }
};
