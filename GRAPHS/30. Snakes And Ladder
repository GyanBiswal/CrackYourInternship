class Solution {
public:
    int n;
    pair<int,int>getCoord(int x){
        int row = (n-1)-(x-1)/n;
        int col = (x - 1) % n;
        
        if((n % 2 == 1 && row % 2 == 1)||( n % 2 == 0 && row % 2 == 0)){
            col = n-1-col;
        }
        return make_pair(row, col);
    }
    int snakesAndLadders(vector<vector<int>>& board) {
        n = board.size();
        vector<vector<bool>>vis(n , vector<bool>(n,false));
        queue<int>q;
        q.push(1);
        vis[n-1][0] = true;
        int steps = 0;

        while(!q.empty()){
            int size = q.size();
            for(int i = 0; i < size; i++){
                int curr = q.front();
                q.pop();
                if(curr == n*n){
                    return steps;
                }
                for(int k = 1; k <= 6; k++){
                    if(curr + k > n*n) break;
                    pair<int,int>coord = getCoord(curr + k);
                    int row = coord.first;
                    int col = coord.second;

                    if(vis[row][col]) continue;
                    vis[row][col] = true;
                    if(board[row][col] == -1){
                        q.push(curr + k);
                    }
                    else{
                        q.push(board[row][col]);
                    }
                }
            }
            steps++;
        }
        return -1;
    }
};
