class Solution {
public:
    vector<int>parent;
    vector<int>rank;

    int find(int x){
        if(x == parent[x]) return x;
        return parent[x] = find(parent[x]);
    }
    void Union(int x , int y){
        int x_parent = find(x);
        int y_parent = find(y);

        if(x_parent == y_parent) return;

        if(rank[x_parent] > rank[y_parent]){
            parent[y_parent] = x_parent;
        }
        else if(rank[y_parent] > rank[x_parent]){
            parent[x_parent] = y_parent;
        }
        else{
            parent[y_parent] = x_parent;
            rank[x_parent]++;
        }
    }
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        parent.resize(n + 1);
        rank.resize(n + 1 , 0);

        // Initially each node is its own parent
        for(int i = 1; i <= n; i++){
            parent[i] = i;
        }

        vector<int>redundantEdge;

        for(auto &edge : edges){
            if(find(edge[0]) == find(edge[1])){ // both nodes are connected and they form a cycle
                redundantEdge = edge;
            }
            else{
                // Union the two nodes
                Union(edge[0] , edge[1]);
            }
        }
        return redundantEdge;
    }
};
