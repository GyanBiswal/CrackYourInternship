class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {

        vector<vector<int>>dist(n , vector<int>(n , INT_MAX));
        
         // Initialize the distances from the edges
        for (auto& edge : edges) {
            int u = edge[0];
            int v = edge[1];
            int w = edge[2];
            dist[u][v] = w;
            dist[v][u] = w;
        }

        for(int i = 0; i < n; i++) dist[i][i] = 0;  // Distance from a node to itself is 0

        // Floyd-Warshall Algorithm
        for(int via = 0; via < n; via++){ 
            for(int i = 0; i < n; i++){
                for(int j = 0; j < n; j++){
                    if(dist[i][via] != INT_MAX && dist[via][j] != INT_MAX){
                        dist[i][j] = min(dist[i][j] , dist[i][via] + dist[via][j]);
                    }
                }
            }
        }

        int countCity = n;
        int cityNo = -1;
        for(int city = 0; city < n; city++){
            int count = 0;
            for(int adjCity = 0; adjCity < n; adjCity++){
                if(dist[city][adjCity] <= distanceThreshold){
                    count++;
                }
            }
            if(count <= countCity){
                countCity = count;
                cityNo = city;
            }
        }
        return cityNo;
    }
};
