class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>>vis(m,vector<int>(n,0));
        vector<vector<int>>dirs{{-1,0},{1,0},{0,-1},{0,1}};
        int minTime = 0;
        int totalFreshOranges = 0;
        queue<pair<pair<int , int> , int>>q;

        // 1. Store the coordinates of rotten oranges
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 2){
                    vis[i][j] = 2;
                    q.push({{i,j}, 0});
                }
                if(grid[i][j] == 1) totalFreshOranges++;
            }
        }

        // Call BFS for every rotten oranges to its adjacent cells
        int totalRottenOranges = 0;
        while(!q.empty()){
            int i = q.front().first.first;
            int j = q.front().first.second;
            int time = q.front().second;
            q.pop();
            minTime = max(minTime , time);

            for(auto &dir : dirs){
                int new_i = i + dir[0];
                int new_j = j + dir[1];
                if(new_i >= 0 && new_i < m && new_j >= 0 && new_j < n && grid[new_i][new_j] == 1 && vis[new_i][new_j] != 2){
                    q.push({{new_i , new_j} , time + 1});
                    vis[new_i][new_j] = 2;
                    totalRottenOranges++;
                }
            }
        }
        if(totalFreshOranges != totalRottenOranges) return -1; // check if all fresh oranges have been rotten or not.
        return minTime;
    }
};
