class Solution {
public:
    vector<int>parent;
    vector<int>rank;

    int find(int x){
        if(x == parent[x]) return x;
        return parent[x] = find(parent[x]);
    }
    void Union(int x , int y){
        int x_parent = find(x);
        int y_parent = find(y);

        if(x_parent == y_parent) return;

        if(rank[x_parent] > rank[y_parent]){
            parent[y_parent] = x_parent;
        }
        else if(rank[y_parent] > rank[x_parent]){
            parent[x_parent] = y_parent;
        }
        else{
            parent[y_parent] = x_parent;
            rank[x_parent]++;
        }
    }

    int removeStones(vector<vector<int>>& stones) {
        int n = stones.size();
        parent.resize(n);
        rank.resize(n, 0);

        // Initialize parent pointers
        for (int i = 0; i < n; ++i)
            parent[i] = i;

        // Map to store the index for each stone
        unordered_map<int, int> rowMap, colMap;

        // Union stones in the same row and column
        for (int i = 0; i < n; i++) {
            int x = stones[i][0], y = stones[i][1];
            if (rowMap.count(x)){
                Union(i, rowMap[x]);
            }
            else{
                rowMap[x] = i;
            }
            if (colMap.count(y)){
                Union(i, colMap[y]);
            }
            else{
                colMap[y] = i;
            }
        }

        // Count the number of unique connected components
        unordered_set<int> uniqueComponents;
        for (int i = 0; i < n; ++i)
            uniqueComponents.insert(find(i));

        return n - uniqueComponents.size();
    }


    // void dfs(vector<vector<int>>& stones , int idx , vector<bool>&vis){
    //     vis[idx] = true;
    //     for(int i = 0; i < stones.size(); i++){
    //         int row = stones[idx][0];
    //         int col = stones[idx][1];
    //         if((!vis[i]) && (stones[i][0] == row || stones[i][1] == col)){
    //             dfs(stones , i , vis);
    //         }
    //     }
    // }
    // int removeStones(vector<vector<int>>& stones) {
    //     int n = stones.size();
    //     int groups = 0;
    //     vector<bool>vis(n , false);
    //     for(int i = 0; i < n; i++){
    //         if(!vis[i]){
    //             dfs(stones , i , vis);
    //             groups++;
    //         }
    //     }
    //     return n - groups;
    // }
};
