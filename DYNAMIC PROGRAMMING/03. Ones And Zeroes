// REC

class Solution {
public:
    pair<int , int> countZeroesOnes(string &strs){
        int zeros = 0 , ones = 0;
        for(char ch : strs){
            if(ch == '0') zeros++;
            else ones++;
        }
        return {zeros , ones};
    }
    int findMaxFormRec(int idx , vector<string>& strs, int m, int n){
        // Base case: all strings considered
        if(idx == strs.size()) return 0;
        auto[zeros , ones] = countZeroesOnes(strs[idx]);

        // 1. not take
        int notTake = findMaxFormRec(idx + 1 , strs , m , n);

        // 2. take only if enough zeroes and ones available
        int take = 0;
        if(zeros <= m && ones <= n){
            take = 1 + findMaxFormRec(idx + 1 , strs , m - zeros , n - ones);
        }
        return max(take , notTake);
    }
    int findMaxForm(vector<string>& strs, int m, int n) {
        return findMaxFormRec(0 , strs , m , n);
    }
};


// Memo

class Solution {
public:
    // Helper function to count zeros and ones in a single string
    pair<int, int> countZeroesOnes(const string& str) {
        int zeros = 0, ones = 0;
        for (char ch : str) {
            if (ch == '0') zeros++;
            else ones++;
        }
        return {zeros, ones};
    }

    // Recursive DP function with memoization
    int findMaxFormDp(int idx, vector<string>& strs, int m, int n, vector<vector<vector<int>>>& dp) {
        // Base case: all strings considered
        if (idx == strs.size()) return 0;

        // If result is already computed
        if (dp[idx][m][n] != -1) return dp[idx][m][n];

        // Count zeros and ones in the current string
        auto [zeros, ones] = countZeroesOnes(strs[idx]);

        // Option 1: Exclude the current string
        int notTake = findMaxFormDp(idx + 1, strs, m, n, dp);

        // Option 2: Include the current string if enough zeros and ones are available
        int take = 0;
        if (zeros <= m && ones <= n) {
            take = 1 + findMaxFormDp(idx + 1, strs, m - zeros, n - ones, dp);
        }

        // Store and return the maximum of including or excluding the current string
        return dp[idx][m][n] = max(take, notTake);
    }

    // Main function to initialize DP table and start recursion
    int findMaxForm(vector<string>& strs, int m, int n) {
        vector<vector<vector<int>>> dp(strs.size(), vector<vector<int>>(m + 1, vector<int>(n + 1, -1)));
        return findMaxFormDp(0, strs, m, n, dp);
    }
};
