// Rec

class Solution {
  public:
    long long solveRec(char keyPad[4][3] , int i , int j , int n){
        // out of bound
        if(i < 0 || i >= 4 || j < 0 || j >= 3) return 0;
        // invalid 
        if(keyPad[i][j] == '*' || keyPad[i][j] == '#') return 0;
        
        if(n == 1) return 1;
        
        return solveRec(keyPad , i , j , n - 1) + 
               solveRec(keyPad , i + 1 , j , n - 1) +
               solveRec(keyPad , i - 1 , j , n - 1) +
               solveRec(keyPad , i , j + 1 , n - 1) +
               solveRec(keyPad , i , j - 1 , n - 1);
    }
    long long getCount(int n) {
        char keyPad[4][3] = {{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
        long long count = 0;
        for(int i = 0; i < 4; i++){
            for(int j = 0; j < 3; j++){
                if(keyPad[i][j] != '*' || keyPad[i][j] != '#'){
                    count += solveRec(keyPad , i , j , n);
                }
            }
        }
        return count;
    }
};

// Memo

class Solution {
  public:
    long long solveDp(char keyPad[4][3] , int i , int j , int n , vector<vector<vector<long long>>>&dp){
        // out of bound
        if(i < 0 || i >= 4 || j < 0 || j >= 3) return 0;
        // invalid 
        if(keyPad[i][j] == '*' || keyPad[i][j] == '#') return 0;
        
        if(n == 1) return 1;
        
        if(dp[i][j][n] != -1) return dp[i][j][n];
        
        
        return dp[i][j][n] = solveDp(keyPad , i , j , n - 1 , dp) +
               solveDp(keyPad , i + 1 , j , n - 1 , dp) +
               solveDp(keyPad , i - 1 , j , n - 1 , dp) +
               solveDp(keyPad , i , j + 1 , n - 1 , dp) +
               solveDp(keyPad , i , j - 1 , n - 1 , dp);
    }
    long long getCount(int n) {
        char keyPad[4][3] = {{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
        vector<vector<vector<long long>>>dp
        (4 , vector<vector<long long>>(3 , vector<long long>(n + 1 , -1)));
        long long count = 0;
        for(int i = 0; i < 4; i++){
            for(int j = 0; j < 3; j++){
                if(keyPad[i][j] != '*' && keyPad[i][j] != '#'){
                    count += solveDp(keyPad , i , j , n , dp);
                }
            }
        }
        return count;
    }
};
