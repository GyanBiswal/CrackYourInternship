class Solution {
public:
    int removeBoxesSub(vector<int>& boxes, int i, int j, int k, vector<vector<vector<int>>>& dp) {
        if (i > j) return 0;
        if (dp[i][j][k] != -1) return dp[i][j][k];
        
        int i0 = i, k0 = k; // Need to record the initial values of i and k in order to apply the following optimization
        while (i + 1 <= j && boxes[i + 1] == boxes[i]) {
            i++;
            k++;
        }
        
        int res = (k + 1) * (k + 1) + removeBoxesSub(boxes, i + 1, j, 0, dp);
        
        for (int m = i + 1; m <= j; m++) {
            if (boxes[i] == boxes[m]) {
                res = max(res, removeBoxesSub(boxes, i + 1, m - 1, 0, dp) + removeBoxesSub(boxes, m, j, k + 1, dp));
            }
        }
        
        dp[i0][j][k0] = res; // When updating the dp matrix, we should use the initial values of i, j, and k
        return res;
    }
    int removeBoxes(vector<int>& boxes) {
        int n = boxes.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(n, vector<int>(n, -1)));
        return removeBoxesSub(boxes, 0, n - 1, 0, dp);
    }
};
