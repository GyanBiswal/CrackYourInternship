// Rec

class Solution {
public:
    int minPathRec(vector<vector<int>>& grid , int i , int j){

        if(i < 0 || j < 0) return INT_MAX;
        if(i == 0 && j == 0) return grid[i][j];

        int up,left;
        if(i > 0){
            up = grid[i][j] + minPathRec(grid , i - 1 , j);
        }
        else{
            up = INT_MAX;
        }
        if(j > 0){
            left = grid[i][j] + minPathRec(grid , i , j - 1);
        }
        else{
            left = INT_MAX;
        }
        return min(up , left);
    }
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        return minPathRec(grid , m-1 , n-1);
    }
};


// Memo

class Solution {
public:
    int minPathDp(vector<vector<int>>& grid , int i , int j , vector<vector<int>>& dp ){
        if(i < 0 || j < 0) return INT_MAX;
        if(i == 0 && j == 0) return grid[i][j];
        if(dp[i][j] != -1) return dp[i][j];

        int up,left;
        if(i > 0){
            up = grid[i][j] + minPathDp(grid , i - 1 , j , dp);
        }
        else{
            up = INT_MAX;
        }
        if(j > 0){
            left = grid[i][j] + minPathDp(grid , i , j - 1 , dp);
        }
        else{
            left = INT_MAX;
        }
        return dp[i][j] = min(up , left);
    }
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>>dp(m , vector<int>(n , -1));
        return minPathDp(grid , m-1 , n-1 , dp);
    }
};


// Tab

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 0));

        // Initialize the first cell with the value from the grid
        dp[0][0] = grid[0][0];

        // Fill the first row (can only come from the left)
        for (int j = 1; j < n; j++) {
            dp[0][j] = dp[0][j - 1] + grid[0][j];
        }

        // Fill the first column (can only come from above)
        for (int i = 1; i < m; i++) {
            dp[i][0] = dp[i - 1][0] + grid[i][0];
        }

        // Fill the rest of the DP table
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];
            }
        }

        // The bottom-right cell contains the minimum path sum
        return dp[m - 1][n - 1];
    }
};
