// Rec

class Solution{
public:
    int solveRec(int idx , int N , int arr[] , int target){
        // Base case: if target is zero, we found a valid subset
        if (target == 0) return 1;
        // Base case: if we reached the end of the array
        if (idx == N) return 0;
        
        int notTake = solveRec(idx + 1, N, arr, target);
        int take = 0;
        if(target >= arr[idx]){
            take = solveRec(idx + 1, N, arr , target - arr[idx]);   
        }
        return notTake || take;
    }
    int equalPartition(int N, int arr[])
    {
        int sum = 0;
        for(int i = 0; i < N; i++){
            sum += arr[i];
        }
        if(sum % 2 != 0) return 0; // if sum is odd
        
        int target = sum / 2;
        
        return solveRec(0, N, arr, target);
    }
};


// Memo

class Solution{
public:
    int solveDp(int idx , int N , int arr[] , int target , vector<vector<int>>&dp){
        // Base case: if target is zero, we found a valid subset
        if (target == 0) return 1;
        // Base case: if we reached the end of the array
        if (idx == N) return 0;
        
        if(dp[idx][target] != -1) return dp[idx][target];
        
        int notTake = solveDp(idx + 1, N, arr, target, dp);
        int take = 0;
        if(target >= arr[idx]){
            take = solveDp(idx + 1, N, arr , target - arr[idx], dp);   
        }
        return dp[idx][target] = notTake || take;
    }
    int equalPartition(int N, int arr[])
    {
        int sum = 0;
        for(int i = 0; i < N; i++){
            sum += arr[i];
        }
        if(sum % 2 != 0) return 0; // if sum is odd
        
        int target = sum / 2;
        
        vector<vector<int>>dp(N + 1, vector<int>(target + 1 , -1));
        
        return solveDp(0, N, arr, target, dp);
    }
};

// Tab

class Solution{
public:
    int equalPartition(int N, int arr[])
    {
        int sum = 0;
        for(int i = 0; i < N; i++){
            sum += arr[i];
        }
        if(sum % 2 != 0) return 0; // if sum is odd
        
        int target = sum / 2;
        
        vector<vector<bool>>dp(N + 1, vector<bool>(target + 1 , false));
        
        // Base case: A sum of 0 can always be achieved with an empty subset
        for (int i = 0; i <= N; i++) {
            dp[i][0] = true;
        }
        
        for(int i = 1; i <= N; i++){
            for(int j = 1; j <= target; j++){
                if(j >= arr[i-1]){
                    dp[i][j] = dp[i-1][j] || dp[i-1][j - arr[i-1]];
                }
                else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[N][target];
    }
};
