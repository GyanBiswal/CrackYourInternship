class TrieNode {
public:
    // Dictionary to store the children nodes
    unordered_map<char, TrieNode*> children;
    // Boolean to indicate the end of a word
    bool isEndOfWord;

    TrieNode() : isEndOfWord(false) {}
};

class Trie {
private:
    TrieNode* root;

public:
    /** Initialize your data structure here. */
    Trie() {
        root = new TrieNode();
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode* node = root;
        for (char c : word) {
            // If the character is not in the children, add a new node
            if (node->children.find(c) == node->children.end()) {
                node->children[c] = new TrieNode();
            }
            // Move to the child node
            node = node->children[c];
        }
        // Mark the end of the word
        node->isEndOfWord = true;
    }

    /** Returns true if the word is in the trie. */
    bool search(string word) {
        TrieNode* node = root;
        for (char c : word) {
            if (node->children.find(c) == node->children.end()) {
                return false;  // The word is not in the trie
            }
            node = node->children[c];
        }
        return node->isEndOfWord;
    }

    /** Returns true if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode* node = root;
        for (char c : prefix) {
            if (node->children.find(c) == node->children.end()) {
                return false;  // No word in the trie starts with the prefix
            }
            node = node->children[c];
        }
        return true;
    }
};
