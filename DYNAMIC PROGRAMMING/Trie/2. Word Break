class Solution{
    public:
    // A : given string to search
    // B : vector of available strings
    
    int wordBreak(string A, vector<string> &B) {
        // Convert the dictionary to a set for fast look-up
        unordered_set<string> wordDict(B.begin(), B.end());
        
        int n = A.size();
        // DP array to store if A[0:i] can be segmented
        vector<bool> dp(n + 1, false);
        dp[0] = true;  // Empty string can always be segmented

        // Iterate over all positions in the string
        for (int i = 1; i <= n; ++i) {
            // Check every possible prefix
            for (int j = 0; j < i; ++j) {
                // If A[0:j] can be segmented and A[j:i] is in the dictionary
                if (dp[j] && wordDict.find(A.substr(j, i - j)) != wordDict.end()) {
                    dp[i] = true;
                    break;  // No need to check further
                }
            }
        }

        // dp[n] will be true if the entire string can be segmented
        return dp[n];
    }
};
