class Solution {
public:
    int largestRectangleArea(vector<int> & heights) {

    int n = heights.size();
    vector<int>leftSmall(n);
    vector<int>rightSmall(n);
    stack<int>s;

    for(int i = 0; i < n; i++){
        while(!s.empty() && heights[s.top()] >= heights[i]){
            s.pop();
        }
        if(s.empty()){
            leftSmall[i] = 0;
        }
        else{
            leftSmall[i] = s.top() + 1;
        }
        s.push(i);
        }

        while(!s.empty()){
        s.pop();
        }


        for(int i = n - 1; i >= 0; i--){
            while(!s.empty() && heights[s.top()] >= heights[i]){
            s.pop();
            }
            if(s.empty()){
            rightSmall[i] = n-1;
            }
            else{
            rightSmall[i] = s.top() - 1;
            }
            s.push(i);
        }

        int maxi = 0;
        for(int i = 0; i < n; i++){
            int curr = (rightSmall[i] - leftSmall[i] + 1) * heights[i];
            maxi = max(maxi, curr);
        }
        return maxi;
    }    
    int maximalRectangle(vector<vector<char>>& matrix) {
        int row = matrix.size();
        int col = matrix[0].size();
        int maxArea = 0;
        vector<int>heights(col,0);
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                if(matrix[i][j] == '1'){
                    heights[j]++;
                }
                else{
                    heights[j] = 0;
                }
            }
            int area = largestRectangleArea(heights);
            maxArea = max(maxArea, area);
        }
        return maxArea;
    }
};
