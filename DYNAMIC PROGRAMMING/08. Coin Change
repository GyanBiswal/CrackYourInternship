class Solution {
public:
    int coinChangeRec(int idx , int amount , vector<int>& coins){
        if(idx == 0){
            if(amount % coins[idx] == 0){
                return amount / coins[0]; // coins = [4] , amount = 12 , so min coins = 12/3 = 4 coins
            }
            else{
                return -1;
            }
        }
        int notTake = 0 + coinChangeRec(idx - 1 , amount , coins);
        int take = INT_MAX;
        if(amount >= coins[idx]){
            take = 1 + coinChangeRec(idx , amount - coins[idx] , coins); // infinite supply pattern
        }
        return min(take , notTake);
    }
    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
        return coinChangeRec(n - 1 , amount , coins);
    }
};


// Memo

class Solution {
public:
    int coinChangeDp(int idx , int amount , vector<int>& coins , vector<vector<int>>&dp){
        if(idx == 0){
            if(amount % coins[idx] == 0){
                return amount / coins[0]; // coins = [4] , amount = 12 , so min coins = 12/3 = 4 coins
            }
            else{
                return INT_MAX; // Not possible to form the amount with the smallest coin
            }
        }
        if(dp[idx][amount] != -1){
            return dp[idx][amount];
        }
        int notTake = 0 + coinChangeDp(idx - 1 , amount , coins , dp);
        int take = INT_MAX;
        if(amount >= coins[idx]){
            int result = coinChangeDp(idx, amount - coins[idx], coins, dp); // infinite supply pattern
            if (result != INT_MAX) {
                take = 1 + result;  // Take the coin and add 1 to the count
            }
        }
        return dp[idx][amount] = min(take , notTake);
    }
    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
        vector<vector<int>> dp(n , vector<int> (amount + 1 , -1));
        int result = coinChangeDp(n - 1, amount, coins, dp);
        return result == INT_MAX ? -1 : result;  // Return -1 if the result is not possible
    }
};


// Tab

class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
        vector<vector<int>> dp(n , vector<int> (amount + 1 , INT_MAX));
        
        for(int t = 0; t <= amount; t++){
            if(t % coins[0] == 0){
                dp[0][t] = t / coins[0];
            }
            else{
                dp[0][t] = INT_MAX;
            }
        }

        for(int i = 1; i < n; i++){
            for(int am = 0; am <= amount; am++){
                int notTake = dp[i-1][am];
                int take = INT_MAX;
                if (am >= coins[i] && dp[i][am - coins[i]] != INT_MAX) {
                    take = 1 + dp[i][am - coins[i]];
                }
                dp[i][am] = min(notTake, take);
            }
        }
        return dp[n-1][amount] == INT_MAX ? -1 : dp[n-1][amount];
    }
};

