/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */

class NestedIterator {
private:
    stack<pair<vector<NestedInteger>::iterator, vector<NestedInteger>::iterator>> stk;

public:
    NestedIterator(vector<NestedInteger> &nestedList) {
        stk.push({nestedList.begin(), nestedList.end()});
    }
    
    int next() {
        // hasNext() will ensure the top of the stack is an integer
        hasNext();
        return stk.top().first++->getInteger();
    }
    
    bool hasNext() {
        while (!stk.empty()) {
            auto &top = stk.top();
            if (top.first == top.second) {
                stk.pop();
                continue;
            }

            if (top.first->isInteger()) {
                return true;
            }

            // If it's a list, expand it by pushing the iterators onto the stack
            auto &nestedList = top.first++->getList();
            stk.push({nestedList.begin(), nestedList.end()});
        }
        return false;
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
