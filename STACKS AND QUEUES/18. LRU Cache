class LRUCache {
    private:
        int capacity;
        list<pair<int, int>> cacheList; // Doubly linked list to store key-value pairs
        unordered_map<int, list<pair<int, int>>::iterator> cacheMap; // Hashmap to map keys to list nodes

    public:
        LRUCache(int capacity) : capacity(capacity) {}

        int get(int key) {
            // If key is not present, return -1
            if (cacheMap.find(key) == cacheMap.end()) {
                return -1;
            }

            // Move the accessed node to the front of the list
            cacheList.splice(cacheList.begin(), cacheList, cacheMap[key]);

            // Return the value associated with the key
            return cacheMap[key]->second;
        }

        void put(int key, int value) {
            // If key already exists, update the value and move it to the front
            if (cacheMap.find(key) != cacheMap.end()) {
                cacheList.splice(cacheList.begin(), cacheList, cacheMap[key]);
                cacheMap[key]->second = value;
                return;
            }

            // If cache is full, remove the least recently used item
            if (cacheList.size() == capacity) {
                int leastUsedKey = cacheList.back().first;
                cacheList.pop_back();
                cacheMap.erase(leastUsedKey);
            }

            // Insert the new key-value pair at the front of the list
            cacheList.emplace_front(key, value);
            cacheMap[key] = cacheList.begin();
        }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
