/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inOrder(TreeNode* root , vector<TreeNode*>&nodes){
        if(root == NULL) return;
        inOrder(root->left , nodes);
        nodes.push_back(root);
        inOrder(root->right , nodes);
    }
    void swap(TreeNode* a , TreeNode* b){
        int temp = a->val;
        a->val = b->val;
        b->val = temp;
    }
    void recoverTree(TreeNode* root) {
        vector<TreeNode*>nodes;
        inOrder(root , nodes);

        TreeNode* first = NULL;
        TreeNode* second = NULL;

        for(int i = 0; i < nodes.size()-1; i++){
            if(nodes[i]->val > nodes[i+1]->val){
                second = nodes[i+1];
                if(!first){
                    first = nodes[i];
                }
                else {
                    break;  // Since there are only two nodes swapped, we can break here
                }
            }
        }
        if(first && second){
            swap(first , second);
        }
    }
};
