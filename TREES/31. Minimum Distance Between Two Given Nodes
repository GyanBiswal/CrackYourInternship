class Solution{
    public:
    Node* LCA(Node* root, int a, int b) {
        if (root == NULL || root->data == a || root->data == b) 
            return root;

        Node* left = LCA(root->left, a, b);
        Node* right = LCA(root->right, a, b);

        if (left && right) 
            return root;

        return (left != NULL) ? left : right;
    }

    // Function to find the level of a given node key from the root
    int findLevel(Node* root, int key, int level) {
        if (root == NULL) 
            return -1;
        
        if (root->data == key) 
            return level;

        int left = findLevel(root->left, key, level + 1);
        if (left != -1) 
            return left;

        return findLevel(root->right, key, level + 1);
    }

    // Function to find the minimum distance between nodes a and b in the tree
    int findDist(Node* root, int a, int b) {
        Node* lca = LCA(root, a, b);
        if (lca == NULL) 
            return -1; // If LCA is not found

        int d1 = findLevel(lca, a, 0);
        int d2 = findLevel(lca, b, 0);

        if (d1 == -1 || d2 == -1) 
            return -1; // If either node is not found

        return d1 + d2;
    }
};
