/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isIdentical(TreeNode* currRoot, TreeNode* currSubRoot){
        if(currRoot == NULL && currSubRoot == NULL) return true;
        if(currRoot == NULL || currSubRoot == NULL) return false;
        if(currRoot->val != currSubRoot->val) return false; // Values of the nodes are different
        
        // Recursively check left and right subtrees
        return isIdentical(currRoot->left , currSubRoot->left) && 
        isIdentical(currRoot->right , currSubRoot->right);

    }
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if(root == NULL) return false;
        if(isIdentical(root , subRoot)) return true; // Check if the current subtree matches subRoot

        // Recursively check left and right subtrees
        return isSubtree(root->left, subRoot) || isSubtree(root->right, subRoot);
    }
};
