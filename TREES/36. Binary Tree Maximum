/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // Helper function to calculate the maximum gain from a subtree
    int maxGain(TreeNode* node, int& maxSum) {
        if (node == nullptr) {
            return 0;
        }

        // Recursively calculate the maximum gain from left and right subtrees
        int leftGain = max(maxGain(node->left, maxSum), 0);  // Ignore negative gains by taking max with 0
        int rightGain = max(maxGain(node->right, maxSum), 0);

        // Calculate the price of the current path (current node + max gains from left and right)
        int currentPathSum = node->val + leftGain + rightGain;

        // Update the global maximum sum if the current path sum is greater
        maxSum = max(maxSum, currentPathSum);

        // Return the maximum gain that can be extended to the parent node
        return node->val + max(leftGain, rightGain);
    }    
    int maxPathSum(TreeNode* root) {
        int maxSum = INT_MIN; // Initialize to the smallest possible value
        maxGain(root, maxSum);
        return maxSum; 
    }
};
