/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        int width = 0;
        queue<pair<TreeNode* , int>>q; // Node , distance
        q.push({root,0});
        while(!q.empty()){
            int size = q.size();
            int minIndex = INT_MAX , maxIndex = INT_MIN;
            while(size--){
                TreeNode* currNode = q.front().first;
                int distance = q.front().second;
                q.pop();
                
                minIndex = min(minIndex , distance);
                maxIndex = max(maxIndex , distance);

                if(currNode->left){
                    q.push({currNode->left , (long long)2 * distance + 1});
                }
                if(currNode->right){
                    q.push({currNode->right , (long long)2 * distance + 2});
                }
            }
            width = max(width , maxIndex - minIndex + 1);
        }
        return width;
    }
};
